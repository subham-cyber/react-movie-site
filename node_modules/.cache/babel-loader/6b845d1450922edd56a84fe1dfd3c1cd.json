{"ast":null,"code":"import { SEARCH_BASE_URL, POPULAR_BASE_URL, API_URL, API_KEY, REQUEST_TOKEN_URL, LOGIN_URL, SESSION_ID_URL } from './config';\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nconst API = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}` : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    }; // First authenticate the requestToken\n\n    const data = await (await fetch(LOGIN_URL, { ...defaultConfig,\n      body: JSON.stringify(bodyData)\n    })).json(); // Then get the sessionId with the requestToken\n\n    if (data.success) {\n      const sessionId = await (await fetch(SESSION_ID_URL, { ...defaultConfig,\n        body: JSON.stringify({\n          request_token: requestToken\n        })\n      })).json();\n      return sessionId;\n    }\n  }\n};\nexport default API;","map":{"version":3,"sources":["/Users/subhamsaha/Dev-Files/React-Practice/react-rmdb-finished-classes/src/API.js"],"names":["SEARCH_BASE_URL","POPULAR_BASE_URL","API_URL","API_KEY","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","defaultConfig","method","headers","API","fetchMovies","searchTerm","page","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","data","body","JSON","stringify","success","sessionId"],"mappings":"AAAA,SACEA,eADF,EAEEC,gBAFF,EAGEC,OAHF,EAIEC,OAJF,EAKEC,iBALF,EAMEC,SANF,EAOEC,cAPF,QAQO,UARP;AAUA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,MADY;AAEpBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFW,CAAtB;AAOA,MAAMC,GAAG,GAAG;AACVC,EAAAA,WAAW,EAAE,OAAOC,UAAP,EAAmBC,IAAnB,KAA4B;AACvC,UAAMC,QAAQ,GAAGF,UAAU,GACtB,GAAEZ,eAAgB,GAAEY,UAAW,SAAQC,IAAK,EADtB,GAEtB,GAAEZ,gBAAiB,SAAQY,IAAK,EAFrC;AAGA,WAAO,MAAM,CAAC,MAAME,KAAK,CAACD,QAAD,CAAZ,EAAwBE,IAAxB,EAAb;AACD,GANS;AAOVC,EAAAA,UAAU,EAAE,MAAOC,OAAP,IAAmB;AAC7B,UAAMJ,QAAQ,GAAI,GAAEZ,OAAQ,SAAQgB,OAAQ,YAAWf,OAAQ,EAA/D;AACA,WAAO,MAAM,CAAC,MAAMY,KAAK,CAACD,QAAD,CAAZ,EAAwBE,IAAxB,EAAb;AACD,GAVS;AAWVG,EAAAA,YAAY,EAAE,MAAOD,OAAP,IAAmB;AAC/B,UAAME,eAAe,GAAI,GAAElB,OAAQ,SAAQgB,OAAQ,oBAAmBf,OAAQ,EAA9E;AACA,WAAO,MAAM,CAAC,MAAMY,KAAK,CAACK,eAAD,CAAZ,EAA+BJ,IAA/B,EAAb;AACD,GAdS;AAeV;AACAK,EAAAA,eAAe,EAAE,YAAY;AAC3B,UAAMC,QAAQ,GAAG,MAAM,CAAC,MAAMP,KAAK,CAACX,iBAAD,CAAZ,EAAiCY,IAAjC,EAAvB;AACA,WAAOM,QAAQ,CAACC,aAAhB;AACD,GAnBS;AAoBVC,EAAAA,YAAY,EAAE,OAAOC,YAAP,EAAqBC,QAArB,EAA+BC,QAA/B,KAA4C;AACxD,UAAMC,QAAQ,GAAG;AACfF,MAAAA,QADe;AAEfC,MAAAA,QAFe;AAGfJ,MAAAA,aAAa,EAAEE;AAHA,KAAjB,CADwD,CAMxD;;AACA,UAAMI,IAAI,GAAG,MAAM,CACjB,MAAMd,KAAK,CAACV,SAAD,EAAY,EACrB,GAAGE,aADkB;AAErBuB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AAFe,KAAZ,CADM,EAKjBZ,IALiB,EAAnB,CAPwD,CAaxD;;AACA,QAAIa,IAAI,CAACI,OAAT,EAAkB;AAChB,YAAMC,SAAS,GAAG,MAAM,CACtB,MAAMnB,KAAK,CAACT,cAAD,EAAiB,EAC1B,GAAGC,aADuB;AAE1BuB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,UAAAA,aAAa,EAAEE;AAAjB,SAAf;AAFoB,OAAjB,CADW,EAKtBT,IALsB,EAAxB;AAMA,aAAOkB,SAAP;AACD;AACF;AA3CS,CAAZ;AA8CA,eAAexB,GAAf","sourcesContent":["import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nconst API = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async (movieId) => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async (movieId) => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n};\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}