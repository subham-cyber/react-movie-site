{"ast":null,"code":"var _jsxFileName = \"/Users/subhamsaha/Dev-Files/React-Practice/react-rmdb-finished-classes/src/components/Movie.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useParams } from 'react-router-dom'; // Config\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'; // Components\n\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor'; // Image\n\nimport NoImage from '../images/no_image.jpg';\nimport API from '../API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: {},\n      loading: true,\n      error: false\n    };\n\n    this.fetchMovie = async () => {\n      const {\n        movieId\n      } = this.props.params;\n\n      try {\n        this.setState({\n          error: false,\n          loading: true\n        });\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); // Get directors only\n\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        this.setState({\n          movie: { ...movie,\n            actors: credits.cast,\n            directors\n          },\n          loading: false\n        });\n      } catch (error) {\n        this.setState({\n          error: true,\n          loading: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  render() {\n    const {\n      movie,\n      loading,\n      error\n    } = this.state;\n    if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Something went wrong...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }, this);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n        movieTitle: movie.original_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n        movie: movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n        time: movie.runtime,\n        budget: movie.budget,\n        revenue: movie.revenue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        header: \"Actors\",\n        children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(Actor, {\n          name: actor.name,\n          character: actor.character,\n          imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n        }, actor.credit_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst MovieWithParams = props => {\n  _s();\n\n  return /*#__PURE__*/_jsxDEV(Movie, { ...props,\n    params: useParams()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 34\n  }, this);\n};\n\n_s(MovieWithParams, \"zmUErVVHtqqM6DIDQ9M8H17P2nM=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieWithParams;\nexport default MovieWithParams;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieWithParams\");","map":{"version":3,"sources":["/Users/subhamsaha/Dev-Files/React-Practice/react-rmdb-finished-classes/src/components/Movie.js"],"names":["React","Component","useParams","IMAGE_BASE_URL","POSTER_SIZE","BreadCrumb","Grid","Spinner","MovieInfo","MovieInfoBar","Actor","NoImage","API","Movie","state","movie","loading","error","fetchMovie","movieId","props","params","setState","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","componentDidMount","render","original_title","runtime","budget","revenue","map","actor","name","character","profile_path","credit_id","MovieWithParams"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { useParams } from 'react-router-dom';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n// Components\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor';\n// Image\nimport NoImage from '../images/no_image.jpg';\nimport API from '../API';\n\nclass Movie extends Component {\n  state = {\n    movie: {},\n    loading: true,\n    error: false\n  };\n\n  fetchMovie = async () => {\n    const { movieId } = this.props.params;\n\n    try {\n      this.setState({ error: false, loading: true });\n\n      const movie = await API.fetchMovie(movieId);\n      const credits = await API.fetchCredits(movieId);\n      // Get directors only\n      const directors = credits.crew.filter(\n        member => member.job === 'Director'\n      );\n\n      this.setState({\n        movie: {\n          ...movie,\n          actors: credits.cast,\n          directors\n        },\n        loading: false\n      });\n    } catch (error) {\n      this.setState({ error: true, loading: false });\n    }\n  };\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  render() {\n    const { movie, loading, error } = this.state;\n\n    if (loading) return <Spinner />;\n    if (error) return <div>Something went wrong...</div>;\n\n    return (\n      <>\n        <BreadCrumb movieTitle={movie.original_title} />\n        <MovieInfo movie={movie} />\n        <MovieInfoBar\n          time={movie.runtime}\n          budget={movie.budget}\n          revenue={movie.revenue}\n        />\n        <Grid header='Actors'>\n          {movie.actors.map(actor => (\n            <Actor\n              key={actor.credit_id}\n              name={actor.name}\n              character={actor.character}\n              imageUrl={\n                actor.profile_path\n                  ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                  : NoImage\n              }\n            />\n          ))}\n        </Grid>\n      </>\n    );\n  }\n}\n\nconst MovieWithParams = props => <Movie {...props} params={useParams()} />;\n\nexport default MovieWithParams;\n"]},"metadata":{},"sourceType":"module"}